name: Unit Testing and CI-CD pipeline
# env:
#   EB_S3_BUCKET_NAME: "elasticbeanstalk-eu-west-2-917530107132"
#   EB_APPLICATION_NAME: "reown-server-prod"
#   EB_ENVIRONMENT_NAME: "Reownserverprod-env"
#   DEPLOY_PACKAGE_NAME: "reown-django-app-${{ github.sha }}.zip"
#   AWS_REGION_NAME: "eu-west-2"

#   # env for testing
#   SECRET_KEY: +h33@$c0!!4!g591#c#d8yjjad0n(5d4uo1fun-8f649c-t3az
#   ACCESS_EXPIRATION_MINUTES: 888
#   REFRESH_EXPIRATION_DAYS: 30
#   ALLOWED_HOSTS: localhost
#   DEBUG: 1

# on: [push, pull_request]
  # push:
  #   branches: [ main ]
      # - main
  # pull_request:
  #   branches: [main, staging]
on:
  push:
    branches: [ develop, staging, main ]
  pull_request:
    branches: [ develop, staging, main ]
env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx

jobs:
  # unit-test:

  #   runs-on: ubuntu-latest
  #   # if: github.ref == 'refs/heads/staging'
  #   services:
  #     postgres:
  #       image: postgres:10.8
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: testing321
  #         POSTGRES_DB: github_actions
  #       ports:
  #         - 5432:5432
  #       # needed because the postgres container does not provide a healthcheck
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python 3.8
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8
  #       cache: 'pip'
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install flake8
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #   - name: Lint with flake8
  #     run: |
  #       # stop the build if there are Python syntax errors or undefined names
  #       flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #       # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #       flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  #   - name: Run migrations
  #     env:
  #       SECRET_KEY: +h33@$c0!!4!g591#c#d8yjjad0n(5d4uo1fun-8f649c-t3az
  #       ALLOWED_HOSTS: localhost
  #       ACCESS_EXPIRATION_MINUTES: 888
  #       REFRESH_EXPIRATION_DAYS: 30
  #       DEBUG: 1
  #     run: python manage.py migrate

  #   - name: Test with django unittest
  #     env:
  #       SECRET_KEY: +h33@$c0!!4!g591#c#d8yjjad0n(5d4uo1fun-8f649c-t3az
  #       ACCESS_EXPIRATION_MINUTES: 888
  #       REFRESH_EXPIRATION_DAYS: 30
  #       ALLOWED_HOSTS: localhost
  #       DEBUG: 1
  #     run: |
  #       python manage.py test
  
  build-ci:
    name: Continuous Integration for DICA
    runs-on: ubuntu-latest
    # needs: unit-test
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DEBUG=1 >> .env
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo NAMESPACE="${{ secrets.NAMESPACE }}" >> .env
          echo PERSONAL_ACCESS_TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .env
          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo VULTR_API_KEY=${{ secrets.VULTR_API_KEY }} >> .env

      - name: Set environment variables
      # - uses: DeLaGuardo/setup-clojure@2.0
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
      - name: Log in to GitHub Container Registry
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Pull images
        run: |
          docker pull "${{ env.WEB_IMAGE }}" || true
          docker pull "${{ env.NGINX_IMAGE }}" || true
      - name: Build staging images
        run: |
          docker-compose -f docker-compose-ci.yml build
      - name: Push images
        run: |
          docker push "${{ env.WEB_IMAGE }}"
          docker push "${{ env.NGINX_IMAGE }}"
  deploy-staging:
    name: Deploy Staging to Cloud VPS
    runs-on: ubuntu-latest
    needs: build-ci
    # if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DEBUG=1 >> .env
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo NAMESPACE="${{ secrets.NAMESPACE }}" >> .env
          echo PERSONAL_ACCESS_TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .env
          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo VULTR_API_KEY=${{ secrets.VULTR_API_KEY }} >> .env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Deploy to Vultr VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose-cd.yml root@${{ secrets.VULTR_IP_ADDRESS }}:./
          ssh -o StrictHostKeyChecking=no root@${{ secrets.VULTR_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env
            docker login ghcr.io -u exceptionalvic -p ${{ secrets.PERSONAL_ACCESS_TOKEN }}
            docker stop web
            docker rm web
            docker stop nginx
            docker rm nginx
            docker rmi $(docker images -q)
            docker pull $WEB_IMAGE
            docker pull $NGINX_IMAGE
            docker-compose -f docker-compose-cd.yml up -d
          ENDSSH